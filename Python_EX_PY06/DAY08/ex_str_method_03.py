# ------------------------------------------------------------
# str data type 전용 함수 즉, 메서드 살펴보기
# ------------------------------------------------------------
## [문자열을 구성하는 문자를 검사해주는 메서드]
## - isxxxxx() => 결과: 논리형 True/False
# [1] 알파벳으로 구성된 문자열인지 검사 => isalphabet()
data = "good"
print(f'{data} => {data.isalpha()}')

# [2] 알파벳으로 구성된 문자열 중에 대문자인지 검사 => isupper() 
# 모두 대문자 ==> True, 1개라도 소문자면 False
data = "good"
print(f'{data} => {data.isupper()}')
print(f'Good => {"Good".isupper()}')

# [3] 알파벳으로 구성된 문자열 중에 소문자인지 검사 => islower()
# 모두 소문자 ==> True, 1개라도 대문자면 False
print(f'GOOD => {"GOOD".islower()}')
print(f'Good => {"Good".islower()}')
print(f'good => {"good".islower()}')

# [4] 숫자로 구성된 문자열인지 검사 => isdecimal()
# 모두 숫자 ==> True, 1개라도 문자가 있으면 False
print(f'1234 => {"1234".isdecimal()}')
print(f'Happy1234 => {"Happy1234".isdecimal()}')

# [5] 숫자, 문자가 혼합된 문자열 검사 => isalnum()
# 모두 숫자 or 모두 알파벳  ==> True
# 공백이 있으면 False
print(f'1234 => {"1234".isalnum()}')
print(f'Happy1234 => {"Happy1234".isalnum()}')

# [6] 공백문자 여부 검사 => isspace()
# 모두 공백이어야  ==> True
# 문자가 있으면 False
print(f'1234 => {"1234   ".isspace()}')
print(f'      => {"      ".isspace()}')

# -----------------------------------------------------------------------------
# 문자열 구성하는 문자 검사 메서드 => 변수명.isOOO()
# -----------------------------------------------------------------------------
# 문자열 내에 숫자 존재여부 체크 메서드들 3종류
# - 변수명.isnumeric()  : 0~9까지의 숫자, 5¹, 5₁, ①, ➊, ⅒, Ⅳ, ⅳ, 百
# - 변수명.isdigit()    : 0~9까지의 숫자, 5¹, 5₁, ①, ➊  원기호도 가능
# - 변수명.isdecimal()  : 0~9까지의 숫자  10진수 숫자만 가능
#    ==> 실수, 음수, 나머지 : False
# - isdecimal() < isdigit() < isnumeric()
# -----------------------------------------------------------------------------
